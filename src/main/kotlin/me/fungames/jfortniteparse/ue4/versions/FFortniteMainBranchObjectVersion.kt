package me.fungames.jfortniteparse.ue4.versions

import me.fungames.jfortniteparse.ue4.objects.core.misc.FGuid
import me.fungames.jfortniteparse.ue4.reader.FArchive

// Custom serialization version for changes made in the //Fortnite/Main stream
object FFortniteMainBranchObjectVersion {
    // Before any version changes were made
    const val BeforeCustomVersionWasAdded = 0

    // World composition tile offset changed from 2d to 3d
    const val WorldCompositionTile3DOffset = 1

    // Minor material serialization optimization
    const val MaterialInstanceSerializeOptimization_ShaderFName = 2

    // Refactored cull distances to account for HLOD, explicit override and globals in priority
    const val CullDistanceRefactor_RemovedDefaultDistance = 3
    const val CullDistanceRefactor_NeverCullHLODsByDefault = 4
    const val CullDistanceRefactor_NeverCullALODActorsByDefault = 5

    // Support to remove morphtarget generated by bRemapMorphtarget
    const val SaveGeneratedMorphTargetByEngine = 6

    // Convert reduction setting options
    const val ConvertReductionSettingOptions = 7

    // Serialize the type of blending used for landscape layer weight static params
    const val StaticParameterTerrainLayerWeightBlendType = 8

    // Fix up None Named animation curve names,
    const val FixUpNoneNameAnimationCurves = 9

    // Ensure ActiveBoneIndices to have parents even not skinned for old assets
    const val EnsureActiveBoneIndicesToContainParents = 10

    // Serialize the instanced static mesh render data, to avoid building it at runtime
    const val SerializeInstancedStaticMeshRenderData = 11

    // Cache material quality node usage
    const val CachedMaterialQualityNodeUsage = 12

    // Font outlines no longer apply to drop shadows for new objects but we maintain the opposite way for backwards compat
    const val FontOutlineDropShadowFixup = 13

    // New skeletal mesh import workflow (Geometry only or animation only re-import )
    const val NewSkeletalMeshImporterWorkflow = 14

    // Migrate data from previous data structure to new one to support materials per LOD on the Landscape
    const val NewLandscapeMaterialPerLOD = 15

    // New Pose Asset data type
    const val RemoveUnnecessaryTracksFromPose = 16

    // Migrate Foliage TLazyObjectPtr to TSoftObjectPtr
    const val FoliageLazyObjPtrToSoftObjPtr = 17

    // TimelineTemplates store their derived names instead of dynamically generating
    // This code tied to this version was reverted and redone at a later date
    const val REVERTED_StoreTimelineNamesInTemplate = 18

    // Added BakePoseOverride for LOD setting
    const val AddBakePoseOverrideForSkeletalMeshReductionSetting = 19

    // TimelineTemplates store their derived names instead of dynamically generating
    const val StoreTimelineNamesInTemplate = 20

    // New Pose Asset data type
    const val WidgetStopDuplicatingAnimations = 21

    // Allow reducing of the base LOD, we need to store some imported model data so we can reduce again from the same data.
    const val AllowSkeletalMeshToReduceTheBaseLOD = 22

    // Curve Table size reduction
    const val ShrinkCurveTableSize = 23

    // Widgets upgraded with WidgetStopDuplicatingAnimations, may not correctly default-to-self for the widget parameter.
    const val WidgetAnimationDefaultToSelfFail = 24

    // HUDWidgets now require an element tag
    const val FortHUDElementNowRequiresTag = 25

    // Animation saved as bulk data when cooked
    const val FortMappedCookedAnimation = 26

    // Support Virtual Bone in Retarget Manager
    const val SupportVirtualBoneInRetargeting = 27

    // Fixup bad defaults in water metadata
    const val FixUpWaterMetadata = 28

    // Move the location of water metadata
    const val MoveWaterMetadataToActor = 29

    // Replaced lake collision component
    const val ReplaceLakeCollision = 30

    // Anim layer node names are now conformed by Guid
    const val AnimLayerGuidConformation = 31

    // Ocean collision component has become dynamic
    const val MakeOceanCollisionTransient = 32

    // FFieldPath will serialize the owner struct reference and only a short path to its property
    const val FFieldPathOwnerSerialization = 33

    // Simplified WaterBody post process material handling
    const val FixUpUnderwaterPostProcessMaterial = 34

    // A single water exclusion volume can now exclude N water bodies
    const val SupportMultipleWaterBodiesPerExclusionVolume = 35

    // Serialize rigvm operators one by one instead of the full byte code array to ensure determinism
    const val RigVMByteCodeDeterminism = 36

    // Serialize the physical materials generated by the render material
    const val LandscapePhysicalMaterialRenderData = 37

    // RuntimeVirtualTextureVolume fix transforms
    const val FixupRuntimeVirtualTextureVolume = 38

    // Retrieve water body collision components that were lost in cooked builds
    const val FixUpRiverCollisionComponents = 39

    // Fix duplicate spline mesh components on rivers
    const val FixDuplicateRiverSplineMeshCollisionComponents = 40

    // Indicates level has stable actor guids
    const val ContainsStableActorGUIDs = 41

    // Levelset Serialization support for BodySetup.
    const val LevelsetSerializationSupportForBodySetup = 42

    // Moving Chaos solver properties to allow them to exist in the project physics settings
    const val ChaosSolverPropertiesMoved = 43

    // Moving some UFortGameFeatureData properties and behaviors into the UGameFeatureAction pattern
    const val GameFeatureData_MovedComponentListAndCheats = 44

    // Add centrifugal forces for cloth
    const val ChaosClothAddfictitiousforces = 45

    // Chaos Convex StructureData supports different index sizes based on num verts/planes
    // Chaos FConvex uses array of FVec3s for vertices instead of particles
    // (Merged from //UE4/Main)
    const val ChaosConvexVariableStructureDataAndVerticesArray = 46

    // Remove the WaterVelocityHeightTexture dependency on MPC_Landscape and LandscapeWaterIndo
    const val RemoveLandscapeWaterInfo = 47

    // Added the weighted value property type to store the cloths weight maps' low/high ranges
    const val ChaosClothAddWeightedValue = 48

    // Added the Long Range Attachment stiffness weight map
    const val ChaosClothAddTetherStiffnessWeightMap = 49

    // Fix corrupted LOD transition maps
    const val ChaosClothFixLODTransitionMaps = 50

    // Enable a few more weight maps to better art direct the cloth simulation
    const val ChaosClothAddTetherScaleAndDragLiftWeightMaps = 51

    // Enable material (edge, bending, and area stiffness) weight maps
    const val ChaosClothAddMaterialWeightMaps = 52

    // Added bShowCurve for movie scene float channel serialization
    const val SerializeFloatChannelShowCurve = 53

    // -----<new versions can be added above this line>-------------------------------------------------
    const val LatestVersion = SerializeFloatChannelShowCurve

    @JvmField val GUID = FGuid(0x601D1886u, 0xAC644F84u, 0xAA16D3DEu, 0x0DEAC7D6u)

    @JvmStatic
    fun get(Ar: FArchive): Int {
        val ver = Ar.customVer(GUID)
        if (ver >= 0) {
            return ver
        }
        val game = Ar.game
        return when {
            game < GAME_UE4(20) -> BeforeCustomVersionWasAdded
            game < GAME_UE4(21) -> CachedMaterialQualityNodeUsage
            game < GAME_UE4(22) -> FoliageLazyObjPtrToSoftObjPtr
            game < GAME_UE4(23) -> FortHUDElementNowRequiresTag
            game < GAME_UE4(24) -> SupportVirtualBoneInRetargeting
            game < GAME_UE4(26) -> AnimLayerGuidConformation
            game < GAME_UE4(27) -> ChaosSolverPropertiesMoved
            else -> LatestVersion
        }
    }
}